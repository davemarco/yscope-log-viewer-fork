import {
    ParsedFieldName,
    REPLACEMENT_CHARACTER,
} from "../../typings/formatters";
import {
    parseKey,
    replaceDoubleBacklash,
} from "../formatters/YscopeFormatter/utils";
import {
    DecoderOptions,
} from "../../typings/decoders";


/**
 * Preprocesses filter key to replace escaped backlash, then parses the key.
 *
 * @param filterKey The key to be preprocessed and parsed.
 * @return The parsed key object.
 */
const preprocessThenParseFilterKey = (filterKey: string): ParsedFieldName => {
    if (filterKey.includes(REPLACEMENT_CHARACTER)) {
        console.warn("Unicode replacement character `U+FFFD` found in filter key; " +
            "it will be replaced with \"\\\"");
    }

    return parseKey(replaceDoubleBacklash(filterKey));
};

/**
 * Parses the log level key and timestamp key.
 *

 * @param logLevelKey
 * @param timestampKey
 * @param supportsAutoGeneratedKeys
 * @return An object containing the parsed log level key and timestamp key.
 * @throws {Error} If the keys contain reserved symbols.
 */
const parseFilterKeys = (decoderOptions: DecoderOptions, supportsAutoGeneratedKeys: boolean): {
    logLevelKey: ParsedFieldName;
    timestampKey: ParsedFieldName;
} => {
    const parsedLogLevelKey = preprocessThenParseFilterKey(decoderOptions.logLevelKey);
    const parsedTimestampKey = preprocessThenParseFilterKey(decoderOptions.timestampKey);

    if (false == supportsAutoGeneratedKeys && (parsedLogLevelKey.isAutoGenerated || parsedTimestampKey.isAutoGenerated)) {
        throw new Error(
            "`@` is a reserved symbol and must be escaped with `\\` " +
            "for JSONL logs."
        );
    }

    return {
        logLevelKey: parsedLogLevelKey,
        timestampKey: parsedTimestampKey,
    };
};

export {
    preprocessThenParseFilterKey,
    parseFilterKeys
};
